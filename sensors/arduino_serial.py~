import serial
import time as t
import random

class Arduino():
    # def __init__(self):
    #     self.sensorCalibrated=False
    #     self.connected=False
    #     self.ser=False
    #     self.connect()
        
    # def connect(self):
        # try:
        #     self.ser = serial.Serial("/dev/ttyACM0",9600,timeout = 0)
        #     t.sleep(2)
        #     print "Arduino connected"
        #     self.connected = True
        # except:
        #     try:
        #         self.ser=serial.Serial('/dev/ttyACM1',9600,timeout = 0)
        #         t.sleep(2)
        #         print "Arduino connected"
        #         self.connected = True
        #     except:
        #         print "No arduino connected"

    def start(self, serial_name='/dev/ttyACM0'):
        if serial_name=='dummy':
            self.ard = None
            self.read = self.dummy_read
            self.write = self.dummy_write
            self.waiting = self.dummy_waiting
        else:
            self.ard = serial.Serial(serial_name)
            self.read = self.serial_read
            self.write = self.serial_write
            self.waiting = self.serial_waiting
            
    def write(self,value):
        self.ard.write(value)
 
    def read(self):
        if self.ard.inWaiting()>0:
            retrieved_value =  self.ard.readline()
        else:
            retrieved_value = None
        return retrieved_value
       
    
    def serial_read(self, channel=0):
       self.ard.write(chr(channel*2)) #request reading the channel
       return ord(self.ard.read(1))

    def weighted_choice(self, choices):
        'used just for dummy read'
        total = sum(w for c, w in choices)
        r = random.uniform(0, total)
        upto = 0
        for c, w in choices:
            if upto + w >= r:
                return c
            upto += w
        assert False, "Shouldn't get here"


    def dummy_read(self):
        return self.weighted_choice([[None,100000],['1\n',1], ['2\n',2]])
    
    def serial_write(self, channel=0, value=0):
        '''Write a high (1) or low (0) value to channels 0--7.'''
        self.ard.write(chr(channel*2 + 1 + 16*value))

    def dummy_write(self, value):
        print "sent " + str(value) + " to dummy arduino"

    def serial_waiting(self):
        print self.ard.inWaiting()

    def dummy_waiting(self):
        return randint(0,1)

    def pip(self, chan):
        self.write(chan, 1)
        self.write(chan, 0)
        
    def write0(self, value):
        self.write(0, value)

    def set_chan(self, chan):
        self.write_chan = chan

    def write_set_chan(self, value):
        self.write(self.write_chan, value)

  
